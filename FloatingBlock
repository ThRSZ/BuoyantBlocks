GlowScript 3.1 VPython

#Texture of Background
##Pic originally from https://cdn.pixabay.com/photo/2019/01/02/03/58/background-3907970_960_720.jpg
scene.autoscale = False
sphere(pos=vector(0,0,0),texture="https://i.imgur.com/1nVWbbd.jpg",radius=55,shininess=0)

#Objects
water = box(pos=vec(0,0.1,0), size=vec(10,10,10), color = color.blue, opacity = 0.5)
glass = box(pos=vec(0,0,0), size=vec(11,10,11), color = color.white, opacity = 0.25)
block = box(pos=vec(0,11,0), size=vec(1,1,1), texture = textures.rock)
floor = box(pos=vec(0,-6,0), size=vec(20,2,12), color = color.green)

#Initial variables
block.v = vec(0,0,0)                                  #Intial velocity of block
block.rho = int(input('Density of Block'))            #Density of block
water.rho = 1000                                      #Density of water
block.volume = block.size.x*block.size.y*block.size.z #Volume of block
block.m = block.rho*block.volume                      #Mass of Block
g = vec(0,-9.8,0)                                     #gravity


t = 0
dt = 0.01

collided = False

while (not collided):
  rate(100)
  
  #Check for collision. 
  distance_y = (block.pos.y - 0.5*block.size.y) - (water.pos.y + 0.5*water.size.y) 
  collided = (distance_y < 0)
  
  #Kinematic Equations
  block.v = block.v + g*dt                        #Velocity of block
  block.pos = block.pos + block.v*t +1/2*g*dt**2  #Position of block
  
  #Time increment
  t = t + dt

while (collided):
  rate(100)
  
  #Check for collision. 
  distance_y = (block.pos.y - 0.5*block.size.y) - (water.pos.y + 0.5*water.size.y) 
  collided = (distance_y < 0)
  
  
  #change in height of volume displaced
  block.bottom = (block.pos.y - .5*block.size.y)
  water.top = (water.pos.y + .5*water.size.y)
  h = abs(water.top - block.bottom)
  
  
  #volume displaced by block
  if h < block.size.y:
    voldis = block.size.x*block.size.z*h 
    #print('ya')
  
  if h >= block.size.y:
    voldis = block.volume 
    #print('no')


  #Buoyant Force
  block.f = block.m*g                                          #gravity
  block.f = block.f - water.rho*voldis*g                       #buoyancy
  
  #Kinematic Equations
  block.v = block.v + block.f/block.m*dt                             #Velocity of block
  drag = 1/2*(1/5)*water.rho*block.size.y*block.size.x*block.v.y**2  #Drag
  block.pos = block.pos + block.v*dt + 1/2*(drag*block.f/block.m)*dt**2     #Position of block
  
  #Time increment
  t = t + dt

  if block.pos.y <= -4.5:
    break

