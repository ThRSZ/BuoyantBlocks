GlowScript 3.1 VPython

#Task 4: Sink or Float?

#Name: Thomas
#Name: Noora


#Texture of Background
##Pic originally from https://cdn.pixabay.com/photo/2019/01/02/03/58/background-3907970_960_720.jpg
scene.autoscale = False
sphere(pos=vector(0,0,0),texture="https://i.imgur.com/1nVWbbd.jpg",radius=55,shininess=0)


#Objects
water = box(pos=vec(0,0.1,0), size=vec(10,10,10), color = color.blue, opacity = 0.5)
glass = box(pos=vec(0,0,0), size=vec(11,10,11), color = color.white, opacity = 0.25)
block = box(pos=vec(0,11,0), size=vec(1,1,1), texture = textures.rock)
wood =  box(pos=vec(0,12,0), size=vec(.5,.5,.5), texture = textures.wood)
floor = box(pos=vec(0,-6,0), size=vec(20,2,12), color = color.green)

#Slider1
def S1(s1):    
   wt.text = '{:1.2f}'.format(s1.value)         #this is to define the format number
block.m = slider(min = 1 , max =5 , value = 2.5 , bind=S1)
wt = wtext(text= "The mass of block is = " '{:1.2f}'.format(block.m.value))  #and to see your selected number on the side of the slider
scene.append_to_caption(' kg\n')  

#Slider2
def S2(s2):    
   wt.text = '{:1.2f}'.format(s2.value)         #this is to define the format number
wood.m = slider(min = 1 , max =5 , value = 3 , bind=S2)
wt = wtext(text= "The mass of block is = " '{:1.2f}'.format(wood.m.value))  #and to see your selected number on the side of the slider
scene.append_to_caption(' kg\n')



#Initial variables
block.v = vec(0,0,0)                                  #Intial velocity of block
block.rho = 500                                      #Density of block
block.volume = block.size.x*block.size.y*block.size.z #Volume of block
block.m = block.rho*block.volume                      #Mass of Block
voldis = 0                                            #displaced volume  of block

wood.v = vec(0,0,0)                                   #Initial velocity of wood
wood.rho = 1000                                        #Density of wood
wood.volume = wood.size.x*wood.size.y*wood.size.z     #Volume of block
wood.m = wood.rho*wood.volume                         #Mass of Block
voldis2 = 0                                           #displaced volume of wood

water.rho = 1000                                      #Density of water
g = vec(0,-9.8,0)                                     #gravity

t = 0
dt = 0.01
#t = t + dt

watercol1 = False
watercol2 = False
blockcol = False

#Freefall (Blocks not touching)
while (not watercol1) and (not watercol2) and (not blockcol):
  rate(100)
  print('Blocks not touching in freefall')
  
  #Check for collision. 
  dist_y1 = (block.pos.y - 0.5*block.size.y) - (water.pos.y + 0.5*water.size.y) 
  watercol1 = (dist_y1 < 0)
  
  dist_y2 = (wood.pos.y - 0.5*wood.size.y) - (water.pos.y + 0.5*water.size.y) 
  watercol2 = (dist_y2 < 0)
  
  blockdist = (wood.pos.y - 0.5*wood.size.y) - (block.pos.y + 0.5*block.size.y) 
  blockcol = (blockdist <= 0)
  
  
  #Kinematic Equations
  block.v = block.v + g*dt                        #Velocity of block
  block.pos = block.pos + block.v*t +1/2*g*dt**2  #Position of block
  
  wood.v = wood.v + g*dt                          #Velocity of wood
  wood.pos = wood.pos + wood.v*t +1/2*g*dt**2     #Position of wood
  
  #Time increment
  t = t + dt
  
#Freefall (Blocks touching)
while (not watercol1) and (not watercol2) and (blockcol):
  rate(100)
  print('Blocks touching in free fall')
  
  #Check for collision. 
  dist_y1 = (block.pos.y - 0.5*block.size.y) - (water.pos.y + 0.5*water.size.y) 
  watercol1 = (dist_y1 < 0)
  
  dist_y2 = (wood.pos.y - 0.5*wood.size.y) - (water.pos.y + 0.5*water.size.y) 
  watercol2 = (dist_y2 < 0)
  
  blockdist = (wood.pos.y - 0.5*wood.size.y) - (block.pos.y + 0.5*block.size.y) 
  blockcol = (blockdist <= 0)
  
  
  #Kinematic Equations
  
  
  block.v = block.v + g*dt                        #Velocity of block
  block.pos = block.pos + block.v*t +1/2*g*dt**2  #Position of block
  
  wood.v = wood.v + g*dt                                      #Velocity of wood
  wood.pos.y = block.pos.y +.5*block.size.y + .5*wood.size.y #Position of wood
  
  #Time increment
  t = t + dt

#Buoyant Force (Blocks not touching, 1 in water)
while (watercol1) and  (not watercol2) and (not blockcol):
  rate(100)
  print('Blocks not touching, 1 in water')
  
  #Check for collision. 
  dist_y1 = (block.pos.y - 0.5*block.size.y) - (water.pos.y + 0.5*water.size.y) 
  watercol1 = (dist_y1 < 0)
  
  dist_y2 = (wood.pos.y - 0.5*wood.size.y) - (water.pos.y + 0.5*water.size.y) 
  watercol2 = (dist_y2 < 0)
  
  blockdist = (wood.pos.y - 0.5*wood.size.y) - (block.pos.y + 0.5*block.size.y) 
  blockcol = (blockdist <= 0)
  
  
  #change in height of volume displaced
  block.bottom = (block.pos.y - .5*block.size.y)
  water.top = (water.pos.y + .5*water.size.y)
  h = abs(water.top - block.bottom)
  
  
  #volume displaced by block
  if h < block.size.y:
    voldis = block.size.x*block.size.z*h 
    #print('ya')
  
  if h >= block.size.y:
    voldis = block.volume 
    #print('no')

  
  #print(voldis)
  #print(voldis2)
  
  #Buoyant Force
  block.f = (block.m)*g                                            #gravity
  block.f = block.f - water.rho*voldis*g                                  #buoyancy
  #print(block.m)
  #print(block.f)
  
  
  #Kinematic Equations
  
  drag = 1/2*(1/5)*water.rho*block.size.y*block.size.x*block.v.y**2
  block.v = block.v + block.f/(block.m)*dt                                #Velocity of block
  block.pos = block.pos + block.v*dt + 1/2*(drag*block.f/block.m)*dt**2  #Position of block
  
  wood.v = wood.v + g*dt                                                  #Velocity of wood
  wood.pos = wood.pos + wood.v*t +1/2*g*dt**2                             #Position of wood

  #print(block.v)
  #print(block.pos)
  #print(wood.pos)
  
  #Time increment
  t = t + dt
  
  if block.pos.y <= -4.5: #or t >= 30:
    break  
  
#Buoyant Force (Blocks touching, 1 in water)
while (watercol1) and  (not watercol2) and (blockcol):
  rate(100)
  print('Blocks touching, 1 in water')
  
  #Check for collision. 
  dist_y1 = (block.pos.y - 0.5*block.size.y) - (water.pos.y + 0.5*water.size.y) 
  watercol1 = (dist_y1 < 0)
  
  dist_y2 = (wood.pos.y - 0.5*wood.size.y) - (water.pos.y + 0.5*water.size.y) 
  watercol2 = (dist_y2 < 0)
  
  blockdist = (wood.pos.y - 0.5*wood.size.y) - (block.pos.y + 0.5*block.size.y) 
  blockcol = (blockdist <= 0)
  
  
  #change in height of volume displaced
  block.bottom = (block.pos.y - .5*block.size.y)
  water.top = (water.pos.y + .5*water.size.y)
  h = abs(water.top - block.bottom)
  
  
  #volume displaced by block
  if h < block.size.y:
    voldis = block.size.x*block.size.z*h 
    #print('ya')
  
  if h >= block.size.y:
    voldis = block.volume 
    #print('no')

  
  #print(voldis)
  #print(voldis2)
  
  #Buoyant Force
  block.f = (block.m+wood.m)*g                                            #gravity
  block.f = block.f - water.rho*voldis*g                                  #buoyancy
  #print(block.m)
  #print(block.f)
  
  
  #Kinematic Equations
  
  block.v = block.v + block.f/(block.m+wood.m)*dt                                #Velocity of block
  wood.v = block.v   
  
  drag = 1/2*(1/5)*water.rho*block.size.y*block.size.x*block.v.y**2
  drag2 = 1/2*(1/5)*water.rho*wood.size.y*wood.size.x*wood.v.y**2
  
  block.pos = block.pos + block.v*dt + 1/2*(drag2*drag*block.f/(block.m+wood.m))*dt**2 #Position of block
  wood.pos.y = block.pos.y +.5*block.size.y + .5*wood.size.y                  #Position of wood
  #print(block.v)
  #print(block.pos)
  #print(wood.pos)
  
  #Time increment
  t = t + dt
  
  if block.pos.y <= -4.5: #or t >= 30:
    break
  
#Buoyant Force (Blocks not touching, both in water)
while (watercol1) and (watercol2) and (not blockcol):
  rate(100)
  print('Blocks not touching, both water')
  
  #Check for collision. 
  dist_y1 = (block.pos.y - 0.5*block.size.y) - (water.pos.y + 0.5*water.size.y) 
  watercol1 = (dist_y1 < 0)
  
  dist_y2 = (wood.pos.y - 0.5*wood.size.y) - (water.pos.y + 0.5*water.size.y) 
  watercol2 = (dist_y2 < 0)
  
  blockdist = (wood.pos.y - 0.5*wood.size.y) - (block.pos.y + 0.5*block.size.y) 
  blockcol = (blockdist <= 0)
  
  
  #change in height of volume displaced
  block.bottom = (block.pos.y - .5*block.size.y)
  water.top = (water.pos.y + .5*water.size.y)
  h = abs(water.top - block.bottom)
  
  wood.bottom = (wood.pos.y - .5*wood.size.y)
  water.top = (water.pos.y + .5*water.size.y)
  i = abs(water.top - wood.bottom)
  #print(water.top)
  #print(block.bottom)
  #print(h)
  
  
  #volume displaced by block
  if h < block.size.y:
    voldis = block.size.x*block.size.z*h 
    #print('ya')
  
  if h >= block.size.y:
    voldis = block.volume 
    #print('no')

  #volume displaced by wood
  if i < wood.size.y:
    voldis2 = wood.size.x*wood.size.z*i 
    #print('ya')
  
  if i >= wood.size.y:
    voldis2 = wood.volume 
    #print('no')
  
  
  #print(voldis)
  
  #Buoyant Force
  block.f = block.m*g                                            #gravity
  block.f = block.f - water.rho*voldis*g                         #buoyancy
  #print(block.m)
  #print(block.f)
  
  wood.f = wood.m*g                                            #gravity
  wood.f = wood.f - water.rho*voldis2*g                         #buoyancy
  #print(block.m)
  #print(wood.f)
  
  
  #Kinematic Equations
  
  block.v = block.v + block.f/block.m*dt                                #Velocity of block
  drag = 1/2*(1/5)*water.rho*block.size.y*block.size.x*block.v.y**2     #Drag of block
  block.pos = block.pos + block.v*dt + 1/2*(drag*block.f/block.m)*dt**2 #Position of block
  #print(block.v)
  #print(block.pos)
  
  wood.v = wood.v + wood.f/wood.m*dt                                #Velocity of wood
  drag2 = 1/2*(1/5)*water.rho*wood.size.y*wood.size.x*wood.v.y**2   #Drag of wood
  wood.pos = wood.pos + wood.v*dt + 1/2*(drag2*wood.f/wood.m)*dt**2 #Position of wood
  
  
  #Time increment
  t = t + dt
  
  if block.pos.y <= -4.5 or t >= 30:
    break

#Buoyant Force (Blocks touching, both in water)
while (watercol1) and  (watercol2) and (blockcol):
  rate(100)
  print('Blocks touching, both in water')
  
  #Check for collision. 
  dist_y1 = (block.pos.y - 0.5*block.size.y) - (water.pos.y + 0.5*water.size.y) 
  watercol1 = (dist_y1 < 0)
  
  dist_y2 = (wood.pos.y - 0.5*wood.size.y) - (water.pos.y + 0.5*water.size.y) 
  watercol2 = (dist_y2 < 0)
  
  blockdist = (wood.pos.y - 0.5*wood.size.y) - (block.pos.y + 0.5*block.size.y) 
  blockcol = (blockdist <= 0)
  
  
  #change in height of volume displaced
  block.bottom = (block.pos.y - .5*block.size.y)
  water.top = (water.pos.y + .5*water.size.y)
  h = abs(water.top - block.bottom)
  
  wood.bottom = (wood.pos.y - .5*wood.size.y)
  water.top = (water.pos.y + .5*water.size.y)
  i = abs(water.top - wood.bottom)
  #print(water.top)
  #print(block.bottom)
  #print(h)
  
  
  
  #volume displaced by block
  if h < block.size.y:
    voldis = block.size.x*block.size.z*h 
    #print('ya')
  
  if h >= block.size.y:
    voldis = block.volume 
    #print('no')

  #volume displaced by wood
  if i < wood.size.y:
    voldis2 = wood.size.x*wood.size.z*i 
    #print('ya')
  
  if i >= wood.size.y:
    voldis2 = wood.volume 
    #print('no')
  
  
  #print(voldis)
  #print(voldis2)
  
  #Buoyant Force
  block.f = (block.m+wood.m)*g                              #gravity
  block.f = block.f - water.rho*g*(voldis + voldis2)        #buoyancy
  #print(block.m)
  #print(block.f)
  
  
  #Kinematic Equations
  
  block.v = block.v + block.f/(block.m+wood.m)*dt                                #Velocity of block
  wood.v = block.v   
  
  drag = 1/2*(1/5)*water.rho*block.size.y*block.size.x*block.v.y**2
  drag2 = 1/2*(1/5)*water.rho*wood.size.y*wood.size.x*wood.v.y**2
  
  block.pos = block.pos + block.v*dt + 1/2*(drag2*drag*block.f/(block.m+wood.m))*dt**2 #Position of block
  wood.pos.y = block.pos.y +.5*block.size.y + .5*wood.size.y                           #Position of wood
  print(block.v)
  #print(block.pos)
  #print(wood.pos)
  
  #Time increment
  t = t + dt
  
  if block.pos.y <= -4.5: #or t >= 30:
    break